syntax = "proto3";

package reddit_scheduler;

service RedditScheduler {
  rpc ListPosts(ListPostsRequest) returns (ListPostsReply) {}

  rpc ListFlairs(ListFlairsRequest) returns (ListFlairsResponse) {}

  rpc SchedulePost(Post) returns (SchedulePostReply) {}

  rpc EditPost(EditPostRequest) returns (EditPostReply) {}
}

message ListPostsRequest {}

message ListPostsReply {
  repeated PostDbEntry posts = 1;
  string error_msg = 2;
}

message ListFlairsRequest {
  string subreddit = 1;
}

message ListFlairsResponse {
  repeated Flair flairs = 1;
}

message SchedulePostReply {
  string error_msg = 1;
}

message Flair {
  string text = 1;
  string id = 2;
}

message Post {
  string title = 1;
  uint64 scheduled_time = 2;
  string subreddit = 3;
  Data data = 4;
  string flair_id = 5;
}

message Data {
  oneof type {
    TextPost text = 1;
    PollPost poll = 2;
    ImagePost image = 3;
    UrlPost url = 4;
  }
}

message TextPost {
  string body = 1;
}

message PollPost {
  string selftext = 1;
  int32 duration = 2;
  repeated string options = 3;
}

message ImagePost {
  // Transmit binary data directly instead of file path to avoid permission
  // errors when reading and also to keep interface generic.
  bytes image_data = 1;
  // e.g. "png" in "image.png"
  string extension = 2;
  bool nsfw = 3;
}

message UrlPost {
  string url = 1;
}

enum PostStatus {
  UNKNOWN = 0;
  PENDING = 1;
  POSTED = 2;
  ERROR = 3;
}

message PostDbEntry {
  int32 id = 1;
  Post post = 2;
  PostStatus status = 3;
  string error = 4;
}

message EditPostRequest {
  // TODO support more operations if users request.
  // For now we assume that if you want to edit its easier to just
  // delete and start over again
  enum Operation { DELETE = 0; }

  Operation operation = 1;
  int32 id = 2;
}

message EditPostReply {
  string error_msg = 1;
}
